{"version":3,"names":["SectionListMemo","React","forwardRef","props","passRef","SectionListImpl","contentContainerStyle","style","onContentSizeChange","refreshControl","rest","name","setRef","contentInset","ref","scrollHandler","enable","_style","_contentContainerStyle","progressViewOffset","useEffect","scrollContentSizeChange","scrollContentSizeChangeHandlers","memoRefreshControl","cloneElement","contentInsetValue","memoContentInset","top","memoContentOffset","x","y","memoContentContainerStyle","memoStyle","SectionList"],"sources":["SectionList.tsx"],"sourcesContent":["import React from 'react'\nimport { SectionList as RNSectionList, SectionListProps } from 'react-native'\n\nimport { AnimatedSectionList } from './helpers'\nimport {\n  useAfterMountEffect,\n  useChainCallback,\n  useCollapsibleStyle,\n  useConvertAnimatedToValue,\n  useScrollHandlerY,\n  useSharedAnimatedRef,\n  useTabNameContext,\n  useTabsContext,\n  useUpdateScrollViewContentSize,\n} from './hooks'\n\n/**\n * Used as a memo to prevent rerendering too often when the context changes.\n * See: https://github.com/facebook/react/issues/15156#issuecomment-474590693\n */\nconst SectionListMemo = React.forwardRef<\n  RNSectionList,\n  React.PropsWithChildren<SectionListProps<unknown>>\n>((props, passRef) => {\n  return <AnimatedSectionList ref={passRef} {...props} />\n})\n\nfunction SectionListImpl<R>(\n  {\n    contentContainerStyle,\n    style,\n    onContentSizeChange,\n    refreshControl,\n    ...rest\n  }: Omit<SectionListProps<R>, 'onScroll'>,\n  passRef: React.Ref<RNSectionList>\n): React.ReactElement {\n  const name = useTabNameContext()\n  const { setRef, contentInset } = useTabsContext()!\n  const ref = useSharedAnimatedRef<RNSectionList<unknown>>(passRef)\n\n  const { scrollHandler, enable } = useScrollHandlerY(name)\n  useAfterMountEffect(() => {\n    // we enable the scroll event after mounting\n    // otherwise we get an `onScroll` call with the initial scroll position which can break things\n    enable(true)\n  })\n\n  const {\n    style: _style,\n    contentContainerStyle: _contentContainerStyle,\n    progressViewOffset,\n  } = useCollapsibleStyle()\n\n  React.useEffect(() => {\n    setRef(name, ref)\n  }, [name, ref, setRef])\n\n  const scrollContentSizeChange = useUpdateScrollViewContentSize({\n    name,\n  })\n\n  const scrollContentSizeChangeHandlers = useChainCallback([\n    scrollContentSizeChange,\n    onContentSizeChange,\n  ])\n\n  const memoRefreshControl =\n    refreshControl &&\n    React.cloneElement(refreshControl, {\n      progressViewOffset,\n      ...refreshControl.props,\n    })\n\n  const contentInsetValue = useConvertAnimatedToValue(contentInset)\n\n  const memoContentInset = { top: contentInsetValue }\n\n  const memoContentOffset = { x: 0, y: -contentInsetValue }\n\n  const memoContentContainerStyle = [\n    _contentContainerStyle,\n    // TODO: investigate types\n    contentContainerStyle as any,\n  ]\n\n  const memoStyle = [_style, style]\n\n  return (\n    // @ts-expect-error typescript complains about `unknown` in the memo, it should be T\n    <SectionListMemo\n      {...rest}\n      ref={ref}\n      bouncesZoom={false}\n      style={memoStyle}\n      contentContainerStyle={memoContentContainerStyle}\n      progressViewOffset={progressViewOffset}\n      onScroll={scrollHandler}\n      onContentSizeChange={scrollContentSizeChangeHandlers}\n      scrollEventThrottle={16}\n      contentInset={memoContentInset}\n      contentOffset={memoContentOffset}\n      automaticallyAdjustContentInsets={false}\n      refreshControl={memoRefreshControl}\n      // workaround for: https://github.com/software-mansion/react-native-reanimated/issues/2735\n      onMomentumScrollEnd={() => {}}\n    />\n  )\n}\n\n/**\n * Use like a regular SectionList.\n */\nexport const SectionList = React.forwardRef(SectionListImpl) as <T>(\n  p: SectionListProps<T> & { ref?: React.Ref<RNSectionList<T>> }\n) => React.ReactElement\n"],"mappings":";;;;;;;AAAA;;AAGA;;AACA;;;;;;AAYA;AACA;AACA;AACA;AACA,MAAMA,eAAe,gBAAGC,eAAMC,UAAN,CAGtB,CAACC,KAAD,EAAQC,OAAR,KAAoB;EACpB,oBAAO,6BAAC,4BAAD;IAAqB,GAAG,EAAEA;EAA1B,GAAuCD,KAAvC,EAAP;AACD,CALuB,CAAxB;;AAOA,SAASE,eAAT,OAQED,OARF,EASsB;EAAA,IARpB;IACEE,qBADF;IAEEC,KAFF;IAGEC,mBAHF;IAIEC,cAJF;IAKE,GAAGC;EALL,CAQoB;EACpB,MAAMC,IAAI,GAAG,+BAAb;EACA,MAAM;IAAEC,MAAF;IAAUC;EAAV,IAA2B,4BAAjC;EACA,MAAMC,GAAG,GAAG,iCAA6CV,OAA7C,CAAZ;EAEA,MAAM;IAAEW,aAAF;IAAiBC;EAAjB,IAA4B,8BAAkBL,IAAlB,CAAlC;EACA,gCAAoB,MAAM;IACxB;IACA;IACAK,MAAM,CAAC,IAAD,CAAN;EACD,CAJD;EAMA,MAAM;IACJT,KAAK,EAAEU,MADH;IAEJX,qBAAqB,EAAEY,sBAFnB;IAGJC;EAHI,IAIF,iCAJJ;;EAMAlB,eAAMmB,SAAN,CAAgB,MAAM;IACpBR,MAAM,CAACD,IAAD,EAAOG,GAAP,CAAN;EACD,CAFD,EAEG,CAACH,IAAD,EAAOG,GAAP,EAAYF,MAAZ,CAFH;;EAIA,MAAMS,uBAAuB,GAAG,2CAA+B;IAC7DV;EAD6D,CAA/B,CAAhC;EAIA,MAAMW,+BAA+B,GAAG,6BAAiB,CACvDD,uBADuD,EAEvDb,mBAFuD,CAAjB,CAAxC;;EAKA,MAAMe,kBAAkB,GACtBd,cAAc,iBACdR,eAAMuB,YAAN,CAAmBf,cAAnB,EAAmC;IACjCU,kBADiC;IAEjC,GAAGV,cAAc,CAACN;EAFe,CAAnC,CAFF;;EAOA,MAAMsB,iBAAiB,GAAG,sCAA0BZ,YAA1B,CAA1B;EAEA,MAAMa,gBAAgB,GAAG;IAAEC,GAAG,EAAEF;EAAP,CAAzB;EAEA,MAAMG,iBAAiB,GAAG;IAAEC,CAAC,EAAE,CAAL;IAAQC,CAAC,EAAE,CAACL;EAAZ,CAA1B;EAEA,MAAMM,yBAAyB,GAAG,CAChCb,sBADgC,EAEhC;EACAZ,qBAHgC,CAAlC;EAMA,MAAM0B,SAAS,GAAG,CAACf,MAAD,EAASV,KAAT,CAAlB;EAEA;IAAA;IACE;IACA,6BAAC,eAAD,eACMG,IADN;MAEE,GAAG,EAAEI,GAFP;MAGE,WAAW,EAAE,KAHf;MAIE,KAAK,EAAEkB,SAJT;MAKE,qBAAqB,EAAED,yBALzB;MAME,kBAAkB,EAAEZ,kBANtB;MAOE,QAAQ,EAAEJ,aAPZ;MAQE,mBAAmB,EAAEO,+BARvB;MASE,mBAAmB,EAAE,EATvB;MAUE,YAAY,EAAEI,gBAVhB;MAWE,aAAa,EAAEE,iBAXjB;MAYE,gCAAgC,EAAE,KAZpC;MAaE,cAAc,EAAEL,kBAblB,CAcE;MAdF;MAeE,mBAAmB,EAAE,MAAM,CAAE;IAf/B;EAFF;AAoBD;AAED;AACA;AACA;;;AACO,MAAMU,WAAW,gBAAGhC,eAAMC,UAAN,CAAiBG,eAAjB,CAApB"}