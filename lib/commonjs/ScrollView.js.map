{"version":3,"names":["ScrollViewMemo","React","forwardRef","props","passRef","ScrollView","contentContainerStyle","style","onContentSizeChange","children","refreshControl","rest","name","ref","setRef","contentInset","_style","_contentContainerStyle","progressViewOffset","scrollHandler","enable","useEffect","scrollContentSizeChange","scrollContentSizeChangeHandlers","memoRefreshControl","cloneElement","contentInsetValue","memoContentInset","top","memoContentOffset","x","y","memoContentContainerStyle","memoStyle"],"sources":["ScrollView.tsx"],"sourcesContent":["import React from 'react'\nimport { ScrollViewProps, ScrollView as RNScrollView } from 'react-native'\nimport Animated from 'react-native-reanimated'\n\nimport {\n  useAfterMountEffect,\n  useChainCallback,\n  useCollapsibleStyle,\n  useConvertAnimatedToValue,\n  useScrollHandlerY,\n  useSharedAnimatedRef,\n  useTabNameContext,\n  useTabsContext,\n  useUpdateScrollViewContentSize,\n} from './hooks'\n\n/**\n * Used as a memo to prevent rerendering too often when the context changes.\n * See: https://github.com/facebook/react/issues/15156#issuecomment-474590693\n */\nconst ScrollViewMemo = React.forwardRef<\n  RNScrollView,\n  React.PropsWithChildren<ScrollViewProps>\n>((props, passRef) => {\n  return (\n    <Animated.ScrollView\n      // @ts-expect-error reanimated types are broken on ref\n      ref={passRef}\n      {...props}\n    />\n  )\n})\n\n/**\n * Use like a regular ScrollView.\n */\nexport const ScrollView = React.forwardRef<\n  RNScrollView,\n  React.PropsWithChildren<Omit<ScrollViewProps, 'onScroll'>>\n>(\n  (\n    {\n      contentContainerStyle,\n      style,\n      onContentSizeChange,\n      children,\n      refreshControl,\n      ...rest\n    },\n    passRef\n  ) => {\n    const name = useTabNameContext()\n    const ref = useSharedAnimatedRef<RNScrollView>(passRef)\n    const { setRef, contentInset } = useTabsContext()!\n    const {\n      style: _style,\n      contentContainerStyle: _contentContainerStyle,\n      progressViewOffset,\n    } = useCollapsibleStyle()\n    const { scrollHandler, enable } = useScrollHandlerY(name)\n    useAfterMountEffect(() => {\n      // we enable the scroll event after mounting\n      // otherwise we get an `onScroll` call with the initial scroll position which can break things\n      enable(true)\n    })\n\n    React.useEffect(() => {\n      setRef(name, ref)\n    }, [name, ref, setRef])\n\n    const scrollContentSizeChange = useUpdateScrollViewContentSize({\n      name,\n    })\n\n    const scrollContentSizeChangeHandlers = useChainCallback([\n      scrollContentSizeChange,\n      onContentSizeChange,\n    ])\n\n    const memoRefreshControl =\n      refreshControl &&\n      React.cloneElement(refreshControl, {\n        progressViewOffset,\n        ...refreshControl.props,\n      })\n\n    const contentInsetValue = useConvertAnimatedToValue(contentInset)\n\n    const memoContentInset = { top: contentInsetValue }\n\n    const memoContentOffset = { x: 0, y: -contentInsetValue }\n\n    const memoContentContainerStyle = [\n      _contentContainerStyle,\n      // TODO: investigate types\n      contentContainerStyle as any,\n    ]\n\n    const memoStyle = [_style, style]\n\n    return (\n      <ScrollViewMemo\n        {...rest}\n        ref={ref}\n        bouncesZoom={false}\n        style={memoStyle}\n        contentContainerStyle={memoContentContainerStyle}\n        onScroll={scrollHandler}\n        onContentSizeChange={scrollContentSizeChangeHandlers}\n        scrollEventThrottle={16}\n        contentInset={memoContentInset}\n        contentOffset={memoContentOffset}\n        automaticallyAdjustContentInsets={false}\n        refreshControl={memoRefreshControl}\n        // workaround for: https://github.com/software-mansion/react-native-reanimated/issues/2735\n        onMomentumScrollEnd={() => {}}\n      >\n        {children}\n      </ScrollViewMemo>\n    )\n  }\n)\n"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;;;;;AAYA;AACA;AACA;AACA;AACA,MAAMA,cAAc,gBAAGC,eAAMC,UAAN,CAGrB,CAACC,KAAD,EAAQC,OAAR,KAAoB;EACpB,oBACE,6BAAC,8BAAD,CAAU,UAAV;IACE;IACA,GAAG,EAAEA;EAFP,GAGMD,KAHN,EADF;AAOD,CAXsB,CAAvB;AAaA;AACA;AACA;;;AACO,MAAME,UAAU,gBAAGJ,eAAMC,UAAN,CAIxB,OASEE,OATF,KAUK;EAAA,IATH;IACEE,qBADF;IAEEC,KAFF;IAGEC,mBAHF;IAIEC,QAJF;IAKEC,cALF;IAME,GAAGC;EANL,CASG;EACH,MAAMC,IAAI,GAAG,+BAAb;EACA,MAAMC,GAAG,GAAG,iCAAmCT,OAAnC,CAAZ;EACA,MAAM;IAAEU,MAAF;IAAUC;EAAV,IAA2B,4BAAjC;EACA,MAAM;IACJR,KAAK,EAAES,MADH;IAEJV,qBAAqB,EAAEW,sBAFnB;IAGJC;EAHI,IAIF,iCAJJ;EAKA,MAAM;IAAEC,aAAF;IAAiBC;EAAjB,IAA4B,8BAAkBR,IAAlB,CAAlC;EACA,gCAAoB,MAAM;IACxB;IACA;IACAQ,MAAM,CAAC,IAAD,CAAN;EACD,CAJD;;EAMAnB,eAAMoB,SAAN,CAAgB,MAAM;IACpBP,MAAM,CAACF,IAAD,EAAOC,GAAP,CAAN;EACD,CAFD,EAEG,CAACD,IAAD,EAAOC,GAAP,EAAYC,MAAZ,CAFH;;EAIA,MAAMQ,uBAAuB,GAAG,2CAA+B;IAC7DV;EAD6D,CAA/B,CAAhC;EAIA,MAAMW,+BAA+B,GAAG,6BAAiB,CACvDD,uBADuD,EAEvDd,mBAFuD,CAAjB,CAAxC;;EAKA,MAAMgB,kBAAkB,GACtBd,cAAc,iBACdT,eAAMwB,YAAN,CAAmBf,cAAnB,EAAmC;IACjCQ,kBADiC;IAEjC,GAAGR,cAAc,CAACP;EAFe,CAAnC,CAFF;;EAOA,MAAMuB,iBAAiB,GAAG,sCAA0BX,YAA1B,CAA1B;EAEA,MAAMY,gBAAgB,GAAG;IAAEC,GAAG,EAAEF;EAAP,CAAzB;EAEA,MAAMG,iBAAiB,GAAG;IAAEC,CAAC,EAAE,CAAL;IAAQC,CAAC,EAAE,CAACL;EAAZ,CAA1B;EAEA,MAAMM,yBAAyB,GAAG,CAChCf,sBADgC,EAEhC;EACAX,qBAHgC,CAAlC;EAMA,MAAM2B,SAAS,GAAG,CAACjB,MAAD,EAAST,KAAT,CAAlB;EAEA,oBACE,6BAAC,cAAD,eACMI,IADN;IAEE,GAAG,EAAEE,GAFP;IAGE,WAAW,EAAE,KAHf;IAIE,KAAK,EAAEoB,SAJT;IAKE,qBAAqB,EAAED,yBALzB;IAME,QAAQ,EAAEb,aANZ;IAOE,mBAAmB,EAAEI,+BAPvB;IAQE,mBAAmB,EAAE,EARvB;IASE,YAAY,EAAEI,gBAThB;IAUE,aAAa,EAAEE,iBAVjB;IAWE,gCAAgC,EAAE,KAXpC;IAYE,cAAc,EAAEL,kBAZlB,CAaE;IAbF;IAcE,mBAAmB,EAAE,MAAM,CAAE;EAd/B,IAgBGf,QAhBH,CADF;AAoBD,CApFuB,CAAnB"}